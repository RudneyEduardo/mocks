{"remainingRequest":"C:\\Users\\Intel\\Documents\\GitHub\\mocks\\mocksWeb\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Intel\\Documents\\GitHub\\mocks\\mocksWeb\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Intel\\Documents\\GitHub\\mocks\\mocksWeb\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Intel\\Documents\\GitHub\\mocks\\mocksWeb\\src\\components\\Container.vue?vue&type=template&id=49781c01&","dependencies":[{"path":"C:\\Users\\Intel\\Documents\\GitHub\\mocks\\mocksWeb\\src\\components\\Container.vue","mtime":1613404164766},{"path":"C:\\Users\\Intel\\Documents\\GitHub\\mocks\\mocksWeb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Intel\\Documents\\GitHub\\mocks\\mocksWeb\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Intel\\Documents\\GitHub\\mocks\\mocksWeb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Intel\\Documents\\GitHub\\mocks\\mocksWeb\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}